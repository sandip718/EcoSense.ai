-- Migration: Create community_recommendations table
-- Implements requirements 4.1, 4.2, 4.3, 4.4 for storing community recommendations

-- Create community_recommendations table
CREATE TABLE community_recommendations (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    location GEOMETRY(POINT, 4326) NOT NULL,
    radius DECIMAL(8,2) NOT NULL CHECK (radius > 0),
    priority VARCHAR(20) NOT NULL CHECK (priority IN ('low', 'medium', 'high', 'urgent')),
    category VARCHAR(30) NOT NULL CHECK (category IN ('immediate_action', 'long_term_strategy', 'monitoring')),
    title VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    steps TEXT[] NOT NULL,
    estimated_impact INTEGER NOT NULL CHECK (estimated_impact >= 0 AND estimated_impact <= 100),
    feasibility_score INTEGER NOT NULL CHECK (feasibility_score >= 0 AND feasibility_score <= 100),
    target_pollutants TEXT[] NOT NULL,
    estimated_cost TEXT,
    time_to_implement TEXT,
    success_metrics TEXT[] NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    expires_at TIMESTAMP WITH TIME ZONE
);

-- Create indexes for efficient querying
CREATE INDEX idx_community_recommendations_location ON community_recommendations USING GIST (location);
CREATE INDEX idx_community_recommendations_priority ON community_recommendations (priority);
CREATE INDEX idx_community_recommendations_category ON community_recommendations (category);
CREATE INDEX idx_community_recommendations_target_pollutants ON community_recommendations USING GIN (target_pollutants);
CREATE INDEX idx_community_recommendations_expires_at ON community_recommendations (expires_at);
CREATE INDEX idx_community_recommendations_created_at ON community_recommendations (created_at);

-- Create composite index for location-based queries with active recommendations
CREATE INDEX idx_community_recommendations_location_active ON community_recommendations USING GIST (location) 
WHERE expires_at IS NULL OR expires_at > NOW();

-- Create function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_community_recommendations_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create trigger to automatically update updated_at
CREATE TRIGGER trigger_update_community_recommendations_updated_at
    BEFORE UPDATE ON community_recommendations
    FOR EACH ROW
    EXECUTE FUNCTION update_community_recommendations_updated_at();

-- Add comments for documentation
COMMENT ON TABLE community_recommendations IS 'Stores community environmental action recommendations generated by the recommendation engine';
COMMENT ON COLUMN community_recommendations.location IS 'Geographic center point of the recommendation area (PostGIS POINT)';
COMMENT ON COLUMN community_recommendations.radius IS 'Radius in kilometers for the recommendation coverage area';
COMMENT ON COLUMN community_recommendations.priority IS 'Priority level: low, medium, high, urgent';
COMMENT ON COLUMN community_recommendations.category IS 'Type of recommendation: immediate_action, long_term_strategy, monitoring';
COMMENT ON COLUMN community_recommendations.estimated_impact IS 'Expected environmental impact score (0-100)';
COMMENT ON COLUMN community_recommendations.feasibility_score IS 'Implementation feasibility score (0-100)';
COMMENT ON COLUMN community_recommendations.target_pollutants IS 'Array of pollutants this recommendation addresses';
COMMENT ON COLUMN community_recommendations.success_metrics IS 'Array of metrics to measure recommendation success';
COMMENT ON COLUMN community_recommendations.expires_at IS 'When this recommendation expires (NULL for permanent recommendations)';